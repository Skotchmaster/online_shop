services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "ruok,srvr,stat,mntr,conf,cons"
    healthcheck:
      test: ["CMD-SHELL", "echo 'ls /' | zookeeper-shell localhost:2181 >/dev/null 2>&1"]
      interval: 5s
      timeout: 5s
      retries: 12
      start_period: 20s
    volumes:
      - zk_data:/var/lib/zookeeper/data
      - zk_log:/var/lib/zookeeper/log
    networks: [backend]

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    env_file: [.env]
    depends_on:
      zookeeper: { condition: service_healthy }
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 2s
      timeout: 3s
      retries: 30
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks: [backend]

  db:
    image: postgres:16
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 2s
      timeout: 3s
      retries: 30
      start_period: 5s
    volumes: [pg_data:/var/lib/postgresql/data]
    networks: [backend]

  dbtest:
    image: postgres:16
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME_TEST}
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 2s
      timeout: 3s
      retries: 30
      start_period: 5s
    networks:
      backend:
        aliases:
          - db_test
  migrate_main:
    image: migrate/migrate:4
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./db/migrations:/migrations:ro
    command: [
      "-path", "/migrations",
      "-database", "${DATABASE_URL}",
      "up"
    ]
    restart: "no"
    networks: [backend]

  migrate_test:
    image: migrate/migrate:4
    depends_on:
      dbtest:
        condition: service_healthy
    volumes:
      - ./db/migrations:/migrations:ro
    command: [
      "-path", "/migrations",
      "-database", "${DATABASE_URL_TEST}",
      "up"
    ]
    restart: "no"   
    networks: [backend] 

  app:
    build: .
    depends_on:
      migrate_main: {condition: service_completed_successfully}
      db: { condition: service_healthy }
      kafka: { condition: service_healthy }
    env_file: [.env]
    environment:
      KAFKA_ADDRESS: kafka:9092
    ports: ["8080:8080"]
    networks: [backend]

  tester:
    build: { context: ., target: tester }
    depends_on:
      migrate_test: {condition: service_completed_successfully}
      dbtest: { condition: service_healthy }
      kafka:   { condition: service_healthy }
    env_file: [.env]
    environment:
      DATABASE_URL: ${DATABASE_URL_TEST}
      KAFKA_ADDRESS: kafka:9092
    command: ["go","test","-v","-count=1","./tests/..."]
    networks: [backend]


volumes:
  zk_data:
  zk_log:
  kafka_data:
  pg_data:
  es_data:

networks:
  backend:
    driver: bridge
